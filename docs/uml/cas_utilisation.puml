@startuml cas_utilisation_etape3
!define RECTANGLE class

title Diagramme de Cas d'Utilisation - Étape 3

' Acteurs
:Client E-commerce: as ClientEcom
:Employé Magasin: as Employee
:Responsable Logistique: as LogManager
:Gestionnaire Maison Mère: as HQManager
:Agent Support Client: as SupportAgent
:Auditeur Système: as Auditor
:Orchestrateur Saga: as SagaOrch
:DevOps Engineer: as DevOps

rectangle "Lab 6 - Saga Orchestrée" {
    usecase "Passer une commande e-commerce" as UC_OrderEcom
    usecase "Valider le panier" as UC_ValidateCart
    usecase "Réserver le stock" as UC_ReserveStock
    usecase "Traiter le paiement" as UC_ProcessPayment
    usecase "Confirmer la commande" as UC_ConfirmOrder
    usecase "Compenser en cas d'échec" as UC_Compensate
    usecase "Surveiller les sagas" as UC_MonitorSaga
    usecase "Gérer les timeouts" as UC_HandleTimeout
    usecase "Réessayer les étapes échouées" as UC_RetrySteps
}

rectangle "Lab 7 - Architecture Événementielle" {
    usecase "Créer une réclamation" as UC_CreateClaim
    usecase "Affecter une réclamation" as UC_AssignClaim
    usecase "Traiter une réclamation" as UC_ProcessClaim
    usecase "Résoudre une réclamation" as UC_ResolveClaim
    usecase "Clôturer une réclamation" as UC_CloseClaim
    usecase "Consulter l'historique des réclamations" as UC_ViewClaimHistory
    usecase "Rechercher des réclamations" as UC_SearchClaims
    usecase "Générer des rapports de réclamations" as UC_GenerateClaimReports
    usecase "Envoyer des notifications automatiques" as UC_SendNotifications
    usecase "Auditer les événements" as UC_AuditEvents
    usecase "Rejouer les événements" as UC_ReplayEvents
    usecase "Créer des projections CQRS" as UC_CreateProjections
}

rectangle "Lab 7 bis - Saga Chorégraphiée" {
    usecase "Initier un remboursement" as UC_InitiateRefund
    usecase "Calculer le montant du remboursement" as UC_CalculateRefund
    usecase "Ajuster le stock pour remboursement" as UC_AdjustRefundStock
    usecase "Notifier le client du remboursement" as UC_NotifyRefund
    usecase "Compenser le remboursement" as UC_CompensateRefund
    usecase "Tracer les sagas chorégraphiées" as UC_TraceChoreoSaga
}

rectangle "Monitoring et Observabilité" {
    usecase "Consulter les métriques Prometheus" as UC_ViewMetrics
    usecase "Analyser les dashboards Grafana" as UC_AnalyzeDashboards
    usecase "Surveiller la santé des services" as UC_MonitorHealth
    usecase "Détecter les anomalies" as UC_DetectAnomalies
    usecase "Générer des alertes" as UC_GenerateAlerts
}

rectangle "Intégration Inter-Architectures" {
    usecase "Enrichir les réclamations avec données commande" as UC_EnrichClaims
    usecase "Gérer le mode dégradé" as UC_HandleDegradedMode
    usecase "Synchroniser les données cross-lab" as UC_SyncCrossLab
}

' Relations Lab 6 - Saga Orchestrée
ClientEcom --> UC_OrderEcom
UC_OrderEcom ..> UC_ValidateCart : <<includes>>
UC_OrderEcom ..> UC_ReserveStock : <<includes>>
UC_OrderEcom ..> UC_ProcessPayment : <<includes>>
UC_OrderEcom ..> UC_ConfirmOrder : <<includes>>
UC_OrderEcom ..> UC_Compensate : <<extends>>

SagaOrch --> UC_MonitorSaga
SagaOrch --> UC_HandleTimeout
SagaOrch --> UC_RetrySteps
SagaOrch --> UC_Compensate

' Relations Lab 7 - Architecture Événementielle
ClientEcom --> UC_CreateClaim
SupportAgent --> UC_AssignClaim
SupportAgent --> UC_ProcessClaim
SupportAgent --> UC_ResolveClaim
SupportAgent --> UC_CloseClaim

HQManager --> UC_ViewClaimHistory
HQManager --> UC_SearchClaims
HQManager --> UC_GenerateClaimReports

UC_CreateClaim ..> UC_SendNotifications : <<includes>>
UC_AssignClaim ..> UC_SendNotifications : <<includes>>
UC_ResolveClaim ..> UC_SendNotifications : <<includes>>

Auditor --> UC_AuditEvents
Auditor --> UC_ReplayEvents
DevOps --> UC_CreateProjections

' Relations Lab 7 bis - Saga Chorégraphiée
SupportAgent --> UC_InitiateRefund
UC_InitiateRefund ..> UC_CalculateRefund : <<includes>>
UC_InitiateRefund ..> UC_AdjustRefundStock : <<includes>>
UC_InitiateRefund ..> UC_NotifyRefund : <<includes>>
UC_InitiateRefund ..> UC_CompensateRefund : <<extends>>

DevOps --> UC_TraceChoreoSaga

' Relations Monitoring
DevOps --> UC_ViewMetrics
DevOps --> UC_AnalyzeDashboards
DevOps --> UC_MonitorHealth
DevOps --> UC_DetectAnomalies
DevOps --> UC_GenerateAlerts

HQManager --> UC_ViewMetrics
HQManager --> UC_AnalyzeDashboards

' Relations Intégration
DevOps --> UC_EnrichClaims
DevOps --> UC_HandleDegradedMode
DevOps --> UC_SyncCrossLab

' Extensions spécifiques Lab 6
UC_ValidateCart ..> UC_Compensate : <<extends>>
UC_ReserveStock ..> UC_Compensate : <<extends>>
UC_ProcessPayment ..> UC_Compensate : <<extends>>

' Extensions spécifiques Lab 7 bis
UC_CalculateRefund ..> UC_CompensateRefund : <<extends>>
UC_AdjustRefundStock ..> UC_CompensateRefund : <<extends>>

' Relations transversales
UC_OrderEcom ..> UC_CreateClaim : <<extends>>
UC_ResolveClaim ..> UC_InitiateRefund : <<extends>>

note top of UC_OrderEcom : Transaction distribuée\navec compensation automatique\n(Saga Orchestrée)

note top of UC_CreateClaim : Architecture événementielle\navec Event Sourcing\net projections CQRS

note top of UC_InitiateRefund : Saga chorégraphiée\ndécentralisée\nsans orchestrateur central

note bottom of UC_EnrichClaims : Intégration entre\nLab 6 et Lab 7\navec mode dégradé

note right of UC_ViewMetrics : Observabilité distribuée\navec Prometheus/Grafana\npour les 3 labs

@enduml