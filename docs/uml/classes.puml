@startuml classes_etape3
!define RECTANGLE class

title Diagramme de Classes - Étape 3 (Labs 6, 7, 7 bis)

package "Lab 6 - Saga Orchestrée" {
    class SagaOrchestrator {
        +saga_id: UUID
        +customer_id: string
        +status: SagaStatus
        +created_at: datetime
        +updated_at: datetime
        +timeout: int
        --
        +execute_saga(request: SagaRequest): SagaResult
        +compensate(failed_step: string): void
        +get_status(): SagaStatus
        +update_state(new_state: SagaStatus): void
        +handle_timeout(): void
    }

    enum SagaStatus {
        PENDING
        CART_VALIDATED
        STOCK_RESERVED
        PAYMENT_PROCESSED
        ORDER_CONFIRMED
        COMPLETED
        CART_VALIDATION_FAILED
        STOCK_RESERVATION_FAILED
        PAYMENT_FAILED
        COMPENSATING_STOCK
        COMPENSATING_PAYMENT
        COMPENSATED
        FAILED
    }

    class SagaStateMachine {
        +current_state: SagaStatus
        +transitions: dict
        --
        +transition(event: string): SagaStatus
        +can_transition(event: string): boolean
        +get_next_steps(): list
    }

    class CompensationManager {
        +compensation_actions: dict
        --
        +compensate_step(step: string, saga_id: UUID): void
        +register_compensation(step: string, action: callable): void
        +rollback_saga(saga_id: UUID, failed_step: string): void
    }

    class PaymentService {
        +payment_gateway_url: string
        +failure_rate: float
        --
        +process_payment(amount: decimal, method: string): PaymentResult
        +refund_payment(transaction_id: string): RefundResult
        +simulate_failure(): boolean
    }

    class SagaRequest {
        +customer_id: string
        +cart_id: string
        +payment_method: string
        +amount: decimal
        +items: list
    }

    class SagaResult {
        +saga_id: UUID
        +status: SagaStatus
        +order_id: string
        +error_message: string
    }
}

package "Lab 7 - Architecture Événementielle" {
    class EventStore {
        +events: list
        +snapshots: dict
        --
        +append_event(event: Event): void
        +get_events(aggregate_id: UUID): list
        +get_events_since(timestamp: datetime): list
        +replay_events(aggregate_id: UUID): AggregateState
        +create_snapshot(aggregate_id: UUID, state: dict): void
    }

    class Event {
        +event_id: UUID
        +event_type: string
        +aggregate_id: UUID
        +data: dict
        +timestamp: datetime
        +correlation_id: UUID
        +version: int
    }

    class EventPublisher {
        +redis_streams: RedisStreams
        +mongo_client: MongoClient
        --
        +publish_event(event_type: string, data: dict): void
        +publish_to_stream(stream: string, event: Event): void
    }

    class EventConsumer {
        +consumer_group: string
        +consumer_name: string
        +event_handlers: dict
        --
        +register_handler(event_type: string, handler: callable): void
        +start_consuming(streams: list): void
        +process_message(message: dict): void
        +acknowledge_message(stream: string, msg_id: string): void
    }

    class ClaimsService {
        +claims_store: dict
        --
        +create_claim(claim_data: dict): Claim
        +assign_to_agent(claim_id: UUID, agent_id: string): void
        +start_processing(claim_id: UUID): void
        +resolve_claim(claim_id: UUID, resolution: string): void
        +close_claim(claim_id: UUID): void
    }

    class Claim {
        +claim_id: UUID
        +customer_id: string
        +claim_type: ClaimType
        +description: string
        +product_id: string
        +status: ClaimStatus
        +assigned_agent: string
        +created_at: datetime
        +resolved_at: datetime
        --
        +assign_to_agent(agent_id: string): void
        +start_processing(): void
        +resolve(resolution: string): void
        +close(): void
        +to_dict(): dict
    }

    enum ClaimType {
        PRODUCT_DEFECT
        DELIVERY_ISSUE
        BILLING_ERROR
        SERVICE_COMPLAINT
    }

    enum ClaimStatus {
        CREATED
        ASSIGNED
        IN_PROGRESS
        RESOLVED
        CLOSED
    }

    class ProjectionService {
        +read_models: dict
        --
        +update_projection(event: Event): void
        +handle_claim_created(event_data: dict): void
        +handle_claim_assigned(event_data: dict): void
        +handle_claim_resolved(event_data: dict): void
    }

    class QueryService {
        +postgres_client: PostgresClient
        --
        +get_claims(filters: dict): list
        +get_claim_statistics(): dict
        +search_claims(query: string): list
        +get_dashboard_data(): dict
    }

    class NotificationService {
        +notification_handlers: dict
        --
        +send_email(recipient: string, subject: string, body: string): void
        +send_sms(phone: string, message: string): void
        +handle_claim_created(event_data: dict): void
        +handle_claim_resolved(event_data: dict): void
    }

    class AuditService {
        +audit_trail: list
        --
        +log_event(event: Event): void
        +create_audit_entry(event_data: dict): void
        +get_audit_trail(filters: dict): list
    }
}

package "Lab 7 bis - Saga Chorégraphiée" {
    class RefundPaymentService {
        +processing_sagas: dict
        +refund_calculator: RefundCalculator
        --
        +handle_saga_started(event_data: dict): void
        +calculate_refund(product_id: string, claim_type: string): decimal
        +compensate_refund(correlation_id: UUID): void
        +ensure_idempotence(correlation_id: UUID): boolean
    }

    class RefundInventoryService {
        +processing_sagas: dict
        +inventory_manager: InventoryManager
        --
        +handle_refund_calculated(event_data: dict): void
        +adjust_stock(product_id: string, quantity: int): dict
        +compensate_stock_adjustment(correlation_id: UUID): void
        +ensure_idempotence(correlation_id: UUID): boolean
    }

    class RefundCalculator {
        +refund_policies: dict
        --
        +calculate_refund(product_id: string, claim_type: string): decimal
        +get_base_price(product_id: string): decimal
        +apply_refund_policy(claim_type: string, base_price: decimal): decimal
    }

    class InventoryManager {
        +stock_levels: dict
        --
        +get_stock_level(product_id: string): int
        +adjust_stock(product_id: string, quantity_change: int): dict
        +get_all_stock_levels(): dict
    }

    class ChoreographyCoordinator {
        +saga_events: dict
        --
        +track_saga_progress(correlation_id: UUID, event_type: string): void
        +check_saga_completion(correlation_id: UUID): boolean
        +handle_saga_failure(correlation_id: UUID): void
    }
}

package "Infrastructure Commune" {
    class RedisStreams {
        +connection: Redis
        --
        +publish_to_stream(stream: string, data: dict): void
        +create_consumer_group(stream: string, group: string): void
        +read_from_group(group: string, consumer: string): list
        +acknowledge_message(stream: string, group: string, msg_id: string): void
    }

    class MongoEventStore {
        +client: MongoClient
        +database: string
        +collection: string
        --
        +store_event(event: Event): void
        +get_events_by_aggregate(aggregate_id: UUID): list
        +get_events_by_type(event_type: string): list
        +get_events_since(timestamp: datetime): list
    }

    class PrometheusMetrics {
        +counters: dict
        +histograms: dict
        +gauges: dict
        --
        +increment_counter(name: string, labels: dict): void
        +observe_histogram(name: string, value: float, labels: dict): void
        +set_gauge(name: string, value: float, labels: dict): void
        +generate_metrics(): string
    }

    class KongGateway {
        +services: list
        +routes: list
        +plugins: list
        --
        +register_service(service: ServiceConfig): void
        +create_route(route: RouteConfig): void
        +apply_plugin(plugin: PluginConfig): void
        +load_balance_request(request: Request): Response
    }
}

' Relations Lab 6
SagaOrchestrator ||--o{ SagaStateMachine
SagaOrchestrator ||--o{ CompensationManager
SagaOrchestrator --> PaymentService
SagaOrchestrator ..> SagaRequest
SagaOrchestrator ..> SagaResult
SagaOrchestrator --> SagaStatus

' Relations Lab 7
ClaimsService ||--o{ Claim
Claim --> ClaimType
Claim --> ClaimStatus
EventStore ||--o{ Event
EventPublisher --> RedisStreams
EventPublisher --> MongoEventStore
EventConsumer --> RedisStreams
ProjectionService --> Event
NotificationService --> EventConsumer
AuditService --> EventConsumer

' Relations Lab 7 bis
RefundPaymentService --> RefundCalculator
RefundInventoryService --> InventoryManager
RefundPaymentService --> EventConsumer
RefundInventoryService --> EventConsumer
ChoreographyCoordinator --> RedisStreams

' Relations Infrastructure
EventPublisher --> PrometheusMetrics
EventConsumer --> PrometheusMetrics
SagaOrchestrator --> PrometheusMetrics
SagaOrchestrator --> KongGateway

note top of SagaOrchestrator : Coordination centralisée\ndes transactions distribuées\n(Synchrone)

note top of EventStore : Persistance immuable\ndes événements\n(Event Sourcing)

note top of RefundPaymentService : Coordination décentralisée\nvia événements\n(Asynchrone)

note bottom of RedisStreams : Infrastructure de messagerie\npartagée entre les 3 labs

@enduml