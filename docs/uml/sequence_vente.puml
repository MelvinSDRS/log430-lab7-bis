@startuml
title E-commerce Checkout Process - Microservices Architecture

actor "Client E-commerce" as CLIENT
participant "Kong Gateway" as KONG
participant "Customer Service" as CUSTOMER_SVC
participant "Product Service" as PRODUCT_SVC
participant "Cart Service" as CART_SVC
participant "Inventory Service" as INVENTORY_SVC
participant "Saga Orchestrator" as SAGA_ORCHESTRATOR
participant "Payment Service" as PAYMENT_SVC
participant "Order Service" as ORDER_SVC
database "Redis Cache" as REDIS
database "Customer DB" as CUSTOMER_DB
database "Product DB" as PRODUCT_DB
database "Inventory DB" as INVENTORY_DB
database "Payment DB" as PAYMENT_DB
database "Order DB" as ORDER_DB

' 1. Customer Authentication
CLIENT -> KONG : POST /api/v1/customers/auth
activate KONG
KONG -> CUSTOMER_SVC : authenticate(email, password)
activate CUSTOMER_SVC
CUSTOMER_SVC -> CUSTOMER_DB : verify credentials
CUSTOMER_DB --> CUSTOMER_SVC : customer data
CUSTOMER_SVC --> KONG : JWT token + customer_id
deactivate CUSTOMER_SVC
KONG --> CLIENT : 200 OK + JWT token
deactivate KONG

' 2. Browse Products
CLIENT -> KONG : GET /api/v1/products?category=electronics
activate KONG
KONG -> PRODUCT_SVC : get_products_by_category(electronics)
activate PRODUCT_SVC
PRODUCT_SVC -> PRODUCT_DB : SELECT products WHERE category...
PRODUCT_DB --> PRODUCT_SVC : product list
PRODUCT_SVC --> KONG : products with details
deactivate PRODUCT_SVC
KONG --> CLIENT : 200 OK + product catalog
deactivate KONG

' 3. Add to Cart (Load Balanced)
CLIENT -> KONG : POST /api/v1/cart/items
activate KONG
KONG -> CART_SVC : add_to_cart(session_id, product_id, quantity)
note right : Load balanced to Cart Service instance
activate CART_SVC
CART_SVC -> REDIS : SADD cart:session_id product_data
REDIS --> CART_SVC : OK
CART_SVC -> PRODUCT_SVC : get_product(product_id)
activate PRODUCT_SVC
PRODUCT_SVC -> PRODUCT_DB : SELECT product WHERE id...
PRODUCT_DB --> PRODUCT_SVC : product details
PRODUCT_SVC --> CART_SVC : product info + price
deactivate PRODUCT_SVC
CART_SVC -> REDIS : UPDATE cart with product details
REDIS --> CART_SVC : cart updated
CART_SVC --> KONG : cart with items + totals
deactivate CART_SVC
KONG --> CLIENT : 200 OK + updated cart
deactivate KONG

' 4. Calculate Taxes
CLIENT -> KONG : POST /api/v1/cart/taxes
activate KONG
KONG -> CART_SVC : calculate_taxes(session_id)
activate CART_SVC
CART_SVC -> REDIS : HGETALL cart:session_id
REDIS --> CART_SVC : cart items
CART_SVC -> CART_SVC : calculate GST (5%) + QST (9.975%)
CART_SVC --> KONG : tax breakdown + total
deactivate CART_SVC
KONG --> CLIENT : 200 OK + tax calculation
deactivate KONG

' 5. Checkout Process (Saga Orchestration)
CLIENT -> KONG : POST /api/v1/sagas/orders
activate KONG
KONG -> SAGA_ORCHESTRATOR : create_order_saga(customer_id, session_id, payment_info)
activate SAGA_ORCHESTRATOR

' 5a. Saga Step 1: Validate Cart
SAGA_ORCHESTRATOR -> CART_SVC : validate_cart(session_id)
activate CART_SVC
CART_SVC -> REDIS : HGETALL cart:session_id
REDIS --> CART_SVC : cart data
CART_SVC --> SAGA_ORCHESTRATOR : cart items + totals
deactivate CART_SVC

' 5b. Saga Step 2: Reserve Stock
SAGA_ORCHESTRATOR -> INVENTORY_SVC : reserve_stock(reservation_id, items)
activate INVENTORY_SVC
INVENTORY_SVC -> INVENTORY_DB : UPDATE stock SET reserved = reserved + quantity
INVENTORY_DB --> INVENTORY_SVC : stock reserved
INVENTORY_SVC --> SAGA_ORCHESTRATOR : reservation confirmed
deactivate INVENTORY_SVC

' 5c. Saga Step 3: Process Payment
SAGA_ORCHESTRATOR -> PAYMENT_SVC : process_payment(transaction_id, amount)
activate PAYMENT_SVC
PAYMENT_SVC -> PAYMENT_DB : INSERT transaction (amount, status=PROCESSING)
PAYMENT_DB --> PAYMENT_SVC : payment processing
PAYMENT_SVC -> PAYMENT_SVC : external_payment_gateway()
note right : Payment gateway integration
PAYMENT_SVC -> PAYMENT_DB : UPDATE transaction SET status = COMPLETED
PAYMENT_DB --> PAYMENT_SVC : payment confirmed
PAYMENT_SVC --> SAGA_ORCHESTRATOR : payment successful
deactivate PAYMENT_SVC

' 5d. Saga Step 4: Create Order
SAGA_ORCHESTRATOR -> ORDER_SVC : create_order(customer_id, items, payment_id)
activate ORDER_SVC
ORDER_SVC -> ORDER_DB : INSERT order (customer_id, items, totals, status=CONFIRMED)
ORDER_DB --> ORDER_SVC : order_id generated
ORDER_SVC -> ORDER_DB : INSERT order_items for each cart item
ORDER_DB --> ORDER_SVC : order items created
ORDER_SVC --> SAGA_ORCHESTRATOR : order created
deactivate ORDER_SVC

' 5e. Saga Step 5: Clear Cart
SAGA_ORCHESTRATOR -> CART_SVC : clear_cart(session_id)
activate CART_SVC
CART_SVC -> REDIS : DEL cart:session_id
REDIS --> CART_SVC : cart cleared
CART_SVC --> SAGA_ORCHESTRATOR : cart cleared
deactivate CART_SVC

SAGA_ORCHESTRATOR --> KONG : saga completed + order_id
deactivate SAGA_ORCHESTRATOR
KONG --> CLIENT : 201 Created + order details
deactivate KONG

' 6. Order Confirmation
CLIENT -> KONG : GET /api/v1/orders/{order_id}
activate KONG
KONG -> ORDER_SVC : get_order(order_id)
activate ORDER_SVC
ORDER_SVC -> ORDER_DB : SELECT order WHERE id...
ORDER_DB --> ORDER_SVC : order details + items
ORDER_SVC --> KONG : complete order information
deactivate ORDER_SVC
KONG --> CLIENT : 200 OK + order confirmation
deactivate KONG

note over CLIENT, ORDER_DB
  Microservices E-commerce Flow with Saga Orchestration:
  1. Customer authentication via Customer Service
  2. Product browsing via Product Service
  3. Cart management via load-balanced Cart Service (Redis)
  4. Saga-orchestrated checkout process:
     a. Cart validation
     b. Stock reservation via Inventory Service
     c. Payment processing via Payment Service
     d. Order creation via Order Service
     e. Cart cleanup
  5. All requests routed through Kong Gateway
  
  Key Features:
  - Saga orchestration for distributed transactions
  - Automatic compensation on failures
  - Load balancing for Cart Service (3 instances)
  - Database per Service pattern (9 PostgreSQL + Redis)
  - JWT authentication and API key validation
  - Transactional consistency across services
end note

@enduml
