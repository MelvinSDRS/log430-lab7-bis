@startuml composants_etape3
!define RECTANGLE class

title Diagramme de Composants - Étape 3

package "Lab 6 - Saga Orchestrée (Synchrone)" {
    component [Saga Orchestrator] as SagaOrch
    component [Payment Service] as PaymentSvc
    component [Cart Service Enhanced] as CartSvcEnh
    component [Inventory Service Enhanced] as InvSvcEnh
    component [Order Service Enhanced] as OrderSvcEnh

    database "Saga State Store" as SagaDB
    database "Payment DB" as PaymentDB

    SagaOrch --> SagaDB
    PaymentSvc --> PaymentDB

    note top of SagaOrch : Orchestration centralisée\nMachine d'états explicite\nCompensation automatique
}

package "Lab 7 - Architecture Événementielle (Asynchrone)" {
    component [Claims Service] as ClaimsSvc
    component [Notification Service] as NotifSvc
    component [Audit Service] as AuditSvc
    component [Projection Service] as ProjSvc
    component [Query Service] as QuerySvc
    component [Event Store Service] as EventStoreSvc
    component [Integration Service] as IntegSvc

    database "Event Store (MongoDB)" as EventStore
    database "Read Models (PostgreSQL)" as ReadModels

    ClaimsSvc --> EventStore
    EventStoreSvc --> EventStore
    ProjSvc --> ReadModels
    QuerySvc --> ReadModels

    note top of ClaimsSvc : Command Side (CQRS)\nPublie des événements
    note top of QuerySvc : Query Side (CQRS)\nLecture optimisée
}

package "Lab 7 bis - Saga Chorégraphiée (Décentralisée)" {
    component [Refund Payment Service] as RefundPaySvc
    component [Refund Inventory Service] as RefundInvSvc
    component [Notification Service Shared] as NotifShared

    note top of RefundPaySvc : Coordination décentralisée\nPas d'orchestrateur\nÉvénements asynchrones
}

package "Infrastructure Partagée" {
    component [Kong API Gateway] as Kong
    component [Redis Streams] as RedisStreams
    component [Prometheus] as Prometheus
    component [Grafana] as Grafana

    database "Redis Cache" as RedisCache
    database "Kong DB" as KongDB

    Kong --> KongDB
    Kong --> RedisCache

    note bottom of RedisStreams : Message Broker commun\naux Labs 7 et 7 bis
}

package "Services Base (Héritage Lab 5)" {
    component [Product Service] as ProductSvc
    component [Customer Service] as CustomerSvc
    component [Sales Service] as SalesSvc
    component [Reporting Service] as ReportingSvc

    database "Product DB" as ProductDB
    database "Customer DB" as CustomerDB
    database "Sales DB" as SalesDB
    database "Reporting DB" as ReportingDB

    ProductSvc --> ProductDB
    CustomerSvc --> CustomerDB
    SalesSvc --> SalesDB
    ReportingSvc --> ReportingDB
}

' Interfaces externes
interface "REST API" as RestAPI
interface "Event Streams" as EventStreams
interface "Metrics API" as MetricsAPI

' Relations Lab 6 - Communications synchrones via Kong
Kong --> SagaOrch : Route /saga
Kong --> PaymentSvc : Route /payment
Kong --> CartSvcEnh : Route /cart (3 instances LB)
Kong --> InvSvcEnh : Route /inventory
Kong --> OrderSvcEnh : Route /order

SagaOrch ..> Kong : API Calls
SagaOrch --> CartSvcEnh : Validate Cart
SagaOrch --> InvSvcEnh : Reserve Stock
SagaOrch --> PaymentSvc : Process Payment
SagaOrch --> OrderSvcEnh : Confirm Order

' Relations Lab 7 - Communications asynchrones via événements
ClaimsSvc --> RedisStreams : Publish Events
NotifSvc --> RedisStreams : Subscribe Events
AuditSvc --> RedisStreams : Subscribe Events
ProjSvc --> RedisStreams : Subscribe Events

RedisStreams --> EventStore : Persist Events
ProjSvc --> ReadModels : Update Projections

' Relations Lab 7 bis - Communications asynchrones décentralisées
ClaimsSvc --> RedisStreams : SagaRemboursementDemarree
RefundPaySvc --> RedisStreams : RemboursementCalcule
RefundInvSvc --> RedisStreams : StockMisAJour
NotifShared --> RedisStreams : SagaRemboursementTerminee

' Intégration Lab 6 ↔ Lab 7
IntegSvc --> Kong : Read Lab 6 Data
IntegSvc --> ClaimsSvc : Enrich Claims

' Monitoring et observabilité
SagaOrch --> Prometheus : Saga Metrics
ClaimsSvc --> Prometheus : Event Metrics
RefundPaySvc --> Prometheus : Refund Metrics
RefundInvSvc --> Prometheus : Stock Metrics

Prometheus --> Grafana : Data Source

' Interfaces externes
Kong -- RestAPI
RedisStreams -- EventStreams
Prometheus -- MetricsAPI

' Relations base services avec Kong
Kong --> ProductSvc : Route /product
Kong --> CustomerSvc : Route /customer
Kong --> SalesSvc : Route /sales
Kong --> ReportingSvc : Route /reporting

' Notes architecturales
note as N1
**Patterns Architecturaux**

**Lab 6 - Saga Orchestrée:**
• Coordination centralisée
• Communication synchrone
• État global visible
• Compensation déterministe

**Lab 7 - Architecture Événementielle:**
• Event Sourcing + CQRS
• Découplage temporel
• Projections optimisées
• Audit trail complet

**Lab 7 bis - Saga Chorégraphiée:**
• Coordination décentralisée
• Pas d'orchestrateur central
• Résilience distribuée
• Compensation locale
end note

note as N2
**Communications**

**Synchrone (Lab 6):**
HTTP/REST via Kong Gateway
Timeout et circuit breakers

**Asynchrone (Lab 7/7bis):**
Redis Streams pub/sub
Event Store MongoDB
Consumer Groups

**Observabilité:**
Prometheus metrics
Grafana dashboards
Structured logging
end note

@enduml