@startuml deploiement_etape3
!define RECTANGLE class

title Diagramme de Déploiement - Étape 3

node "Client Applications" {
    artifact "Web Frontend" as WebApp
    artifact "Mobile App" as MobileApp
    artifact "Admin Dashboard" as AdminDash
}

node "Load Balancer / API Gateway" {
    artifact "Kong Gateway" as Kong
    artifact "Kong Admin API" as KongAdmin
    database "Kong Database" as KongDB
}

cloud "Docker Swarm / Kubernetes Cluster" {
    
    node "Lab 6 - Saga Orchestrée" {
        artifact "Saga Orchestrator:8008" as SagaOrch
        artifact "Payment Service:8009" as PaymentSvc
        
        database "Saga State DB:5440" as SagaStateDB
        database "Payment DB:5441" as PaymentDB
    }

    node "Lab 7 - Architecture Événementielle" {
        artifact "Claims Service:8101" as ClaimsSvc
        artifact "Notification Service:8102" as NotifSvc
        artifact "Audit Service:8103" as AuditSvc
        artifact "Projection Service:8104" as ProjSvc
        artifact "Query Service:8105" as QuerySvc
        artifact "Event Store Service:8106" as EventStoreSvc
        artifact "Integration Service:8107" as IntegSvc
        
        database "Event Store (MongoDB):27018" as EventStore
        database "Read Models (PostgreSQL):5439" as ReadModels
    }

    node "Lab 7 bis - Saga Chorégraphiée" {
        artifact "Refund Payment Service:8108" as RefundPaySvc
        artifact "Refund Inventory Service:8109" as RefundInvSvc
        
        note bottom of RefundPaySvc : Utilise la même infrastructure\névenementielle que Lab 7
    }

    node "Services Base (Héritage Étape 2)" {
        artifact "Product Service:8001" as ProductSvc
        artifact "Customer Service:8005" as CustomerSvc
        artifact "Cart Service Instance 1:8006" as CartSvc1
        artifact "Cart Service Instance 2:8016" as CartSvc2
        artifact "Cart Service Instance 3:8026" as CartSvc3
        artifact "Inventory Service:8002" as InvSvc
        artifact "Sales Service:8003" as SalesSvc
        artifact "Order Service:8007" as OrderSvc
        artifact "Reporting Service:8004" as ReportingSvc

        database "Product DB:5433" as ProductDB
        database "Customer DB:5434" as CustomerDB
        database "Inventory DB:5435" as InvDB
        database "Sales DB:5436" as SalesDB
        database "Order DB:5438" as OrderDB
        database "Reporting DB:5437" as ReportingDB
    }

    node "Message Broker" {
        artifact "Redis Streams:6381" as RedisStreams
        database "Redis Persistence" as RedisPersist
    }

    node "Cache Layer" {
        artifact "Redis Cache:6379" as RedisCache
    }

    node "Monitoring Stack" {
        artifact "Prometheus:9091" as Prometheus
        artifact "Grafana:3001" as Grafana
        
        database "Prometheus TSDB" as PromDB
        database "Grafana DB" as GrafanaDB
    }
}

node "External Services" {
    cloud "Payment Gateway" as PaymentGW
    cloud "Email Service" as EmailSvc
    cloud "SMS Service" as SMSSvc
}

' Connexions clients
WebApp --> Kong : HTTPS:8080
MobileApp --> Kong : HTTPS:8080
AdminDash --> Kong : HTTPS:8080

Kong --> KongDB

' Lab 6 - Connexions synchrones via Kong
Kong --> SagaOrch : HTTP
Kong --> PaymentSvc : HTTP
Kong --> CartSvc1 : HTTP (LB)
Kong --> CartSvc2 : HTTP (LB)
Kong --> CartSvc3 : HTTP (LB)
Kong --> InvSvc : HTTP
Kong --> OrderSvc : HTTP

SagaOrch --> SagaStateDB
PaymentSvc --> PaymentDB
PaymentSvc --> PaymentGW : HTTPS

' Lab 7 - Connexions asynchrones via événements
ClaimsSvc --> RedisStreams : Pub/Sub
NotifSvc --> RedisStreams : Pub/Sub
AuditSvc --> RedisStreams : Pub/Sub
ProjSvc --> RedisStreams : Pub/Sub

ClaimsSvc --> EventStore
EventStoreSvc --> EventStore
ProjSvc --> ReadModels
QuerySvc --> ReadModels

NotifSvc --> EmailSvc : HTTPS
NotifSvc --> SMSSvc : HTTPS

' Lab 7 bis - Connexions asynchrones décentralisées
RefundPaySvc --> RedisStreams : Pub/Sub
RefundInvSvc --> RedisStreams : Pub/Sub

' Intégration Lab 6 ↔ Lab 7
IntegSvc --> Kong : HTTP (Read Lab 6)

' Services base via Kong
Kong --> ProductSvc : HTTP
Kong --> CustomerSvc : HTTP
Kong --> SalesSvc : HTTP
Kong --> ReportingSvc : HTTP

' Connexions base de données
ProductSvc --> ProductDB
CustomerSvc --> CustomerDB
InvSvc --> InvDB
SalesSvc --> SalesDB
OrderSvc --> OrderDB
ReportingSvc --> ReportingDB

' Cache
CartSvc1 --> RedisCache
CartSvc2 --> RedisCache
CartSvc3 --> RedisCache

' Persistence Redis Streams
RedisStreams --> RedisPersist

' Monitoring
SagaOrch --> Prometheus : Metrics
ClaimsSvc --> Prometheus : Metrics
RefundPaySvc --> Prometheus : Metrics
RefundInvSvc --> Prometheus : Metrics
ProductSvc --> Prometheus : Metrics
CustomerSvc --> Prometheus : Metrics
CartSvc1 --> Prometheus : Metrics
CartSvc2 --> Prometheus : Metrics
CartSvc3 --> Prometheus : Metrics

Prometheus --> PromDB
Grafana --> Prometheus : Query
Grafana --> GrafanaDB

' Monitoring des dashboards
AdminDash --> Grafana : HTTPS:3001
AdminDash --> Prometheus : HTTPS:9091

' Configuration réseau
note top of Kong : Point d'entrée unique\nLoad Balancing\nAPI Keys + JWT\nRate Limiting

note top of RedisStreams : Message Broker central\nConsumer Groups\nEvent Persistence\nStream Replay

note bottom of EventStore : Event Sourcing\nImmutable Events\nProjection Replay\nAudit Trail

note as NetworkConfig
**Configuration Réseau**

**Ports externes exposés:**
• Kong Gateway: 8080 (HTTPS)
• Kong Admin: 8001
• Grafana: 3001
• Prometheus: 9091

**Communication interne:**
• Services: HTTP REST
• Événements: Redis Streams
• Monitoring: Prometheus Pull

**Sécurité:**
• TLS entre services
• API Keys Kong
• JWT pour Customer/Order
• Network policies
end note

note as DeploymentStrategy
**Stratégie de Déploiement**

**Lab 6:** Docker Compose
Services synchrones
État centralisé

**Lab 7:** Docker Compose
Services asynchrones
Event Store persistant

**Lab 7 bis:** Extension Lab 7
Services chorégraphiés
Pas d'état central

**Production:** Kubernetes
Auto-scaling
Service Mesh
end note

@enduml